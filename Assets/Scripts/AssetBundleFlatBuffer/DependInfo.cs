// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FLATBUFFER

namespace AssetBundleFlatBuffer
{

using global::System;
using global::FlatBuffers;

public struct DependInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DependInfo GetRootAsDependInfo(ByteBuffer _bb) { return GetRootAsDependInfo(_bb, new DependInfo()); }
  public static DependInfo GetRootAsDependInfo(ByteBuffer _bb, DependInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DependInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AbFileName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetAbFileNameBytes() { return __p.__vector_as_arraysegment(4); }
  public int RefCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<DependInfo> CreateDependInfo(FlatBufferBuilder builder,
      StringOffset abFileNameOffset = default(StringOffset),
      int refCount = 0) {
    builder.StartObject(2);
    DependInfo.AddRefCount(builder, refCount);
    DependInfo.AddAbFileName(builder, abFileNameOffset);
    return DependInfo.EndDependInfo(builder);
  }

  public static void StartDependInfo(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddAbFileName(FlatBufferBuilder builder, StringOffset abFileNameOffset) { builder.AddOffset(0, abFileNameOffset.Value, 0); }
  public static void AddRefCount(FlatBufferBuilder builder, int refCount) { builder.AddInt(1, refCount, 0); }
  public static Offset<DependInfo> EndDependInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DependInfo>(o);
  }
};


}

#endif
