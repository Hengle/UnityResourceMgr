// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FLATBUFFER
namespace AssetBundleFlatBuffer
{

using global::System;
using global::FlatBuffers;

public struct AssetBundleTree : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AssetBundleTree GetRootAsAssetBundleTree(ByteBuffer _bb) { return GetRootAsAssetBundleTree(_bb, new AssetBundleTree()); }
  public static AssetBundleTree GetRootAsAssetBundleTree(ByteBuffer _bb, AssetBundleTree obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AssetBundleTree __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FileHeader? FileHeader { get { int o = __p.__offset(4); return o != 0 ? (FileHeader?)(new FileHeader()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public AssetBundleInfo? AssetBundles(int j) { int o = __p.__offset(6); return o != 0 ? (AssetBundleInfo?)(new AssetBundleInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AssetBundlesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AssetBundleTree> CreateAssetBundleTree(FlatBufferBuilder builder,
      Offset<FileHeader> fileHeaderOffset = default(Offset<FileHeader>),
      VectorOffset assetBundlesOffset = default(VectorOffset)) {
    builder.StartObject(2);
    AssetBundleTree.AddAssetBundles(builder, assetBundlesOffset);
    AssetBundleTree.AddFileHeader(builder, fileHeaderOffset);
    return AssetBundleTree.EndAssetBundleTree(builder);
  }

  public static void StartAssetBundleTree(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddFileHeader(FlatBufferBuilder builder, Offset<FileHeader> fileHeaderOffset) { builder.AddOffset(0, fileHeaderOffset.Value, 0); }
  public static void AddAssetBundles(FlatBufferBuilder builder, VectorOffset assetBundlesOffset) { builder.AddOffset(1, assetBundlesOffset.Value, 0); }
  public static VectorOffset CreateAssetBundlesVector(FlatBufferBuilder builder, Offset<AssetBundleInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartAssetBundlesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AssetBundleTree> EndAssetBundleTree(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AssetBundleTree>(o);
  }
  public static void FinishAssetBundleTreeBuffer(FlatBufferBuilder builder, Offset<AssetBundleTree> offset) { builder.Finish(offset.Value); }
};


}

#endif
