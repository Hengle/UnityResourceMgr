// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>


#if USE_FLATBUFFER

namespace AssetBundleFlatBuffer
{

using global::System;
using global::FlatBuffers;

public struct AssetBundleInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AssetBundleInfo GetRootAsAssetBundleInfo(ByteBuffer _bb) { return GetRootAsAssetBundleInfo(_bb, new AssetBundleInfo()); }
  public static AssetBundleInfo GetRootAsAssetBundleInfo(ByteBuffer _bb, AssetBundleInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AssetBundleInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AssetBundleFileHeader? FileHeader { get { int o = __p.__offset(4); return o != 0 ? (AssetBundleFileHeader?)(new AssetBundleFileHeader()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public SubFileInfo? SubFiles(int j) { int o = __p.__offset(6); return o != 0 ? (SubFileInfo?)(new SubFileInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubFilesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public DependInfo? DependFiles(int j) { int o = __p.__offset(8); return o != 0 ? (DependInfo?)(new DependInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DependFilesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AssetBundleInfo> CreateAssetBundleInfo(FlatBufferBuilder builder,
      Offset<AssetBundleFileHeader> fileHeaderOffset = default(Offset<AssetBundleFileHeader>),
      VectorOffset subFilesOffset = default(VectorOffset),
      VectorOffset dependFilesOffset = default(VectorOffset)) {
    builder.StartObject(3);
    AssetBundleInfo.AddDependFiles(builder, dependFilesOffset);
    AssetBundleInfo.AddSubFiles(builder, subFilesOffset);
    AssetBundleInfo.AddFileHeader(builder, fileHeaderOffset);
    return AssetBundleInfo.EndAssetBundleInfo(builder);
  }

  public static void StartAssetBundleInfo(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddFileHeader(FlatBufferBuilder builder, Offset<AssetBundleFileHeader> fileHeaderOffset) { builder.AddOffset(0, fileHeaderOffset.Value, 0); }
  public static void AddSubFiles(FlatBufferBuilder builder, VectorOffset subFilesOffset) { builder.AddOffset(1, subFilesOffset.Value, 0); }
  public static VectorOffset CreateSubFilesVector(FlatBufferBuilder builder, Offset<SubFileInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSubFilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDependFiles(FlatBufferBuilder builder, VectorOffset dependFilesOffset) { builder.AddOffset(2, dependFilesOffset.Value, 0); }
  public static VectorOffset CreateDependFilesVector(FlatBufferBuilder builder, Offset<DependInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDependFilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AssetBundleInfo> EndAssetBundleInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AssetBundleInfo>(o);
  }
};


}

#endif
