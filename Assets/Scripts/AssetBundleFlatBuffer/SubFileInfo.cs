// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FLATBUFFER

namespace AssetBundleFlatBuffer
{

using global::System;
using global::FlatBuffers;

public struct SubFileInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SubFileInfo GetRootAsSubFileInfo(ByteBuffer _bb) { return GetRootAsSubFileInfo(_bb, new SubFileInfo()); }
  public static SubFileInfo GetRootAsSubFileInfo(ByteBuffer _bb, SubFileInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SubFileInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FileName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetFileNameBytes() { return __p.__vector_as_arraysegment(4); }
  public string ShaderName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetShaderNameBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<SubFileInfo> CreateSubFileInfo(FlatBufferBuilder builder,
      StringOffset fileNameOffset = default(StringOffset),
      StringOffset shaderNameOffset = default(StringOffset)) {
    builder.StartObject(2);
    SubFileInfo.AddShaderName(builder, shaderNameOffset);
    SubFileInfo.AddFileName(builder, fileNameOffset);
    return SubFileInfo.EndSubFileInfo(builder);
  }

  public static void StartSubFileInfo(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddFileName(FlatBufferBuilder builder, StringOffset fileNameOffset) { builder.AddOffset(0, fileNameOffset.Value, 0); }
  public static void AddShaderName(FlatBufferBuilder builder, StringOffset shaderNameOffset) { builder.AddOffset(1, shaderNameOffset.Value, 0); }
  public static Offset<SubFileInfo> EndSubFileInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SubFileInfo>(o);
  }
};


}

#endif