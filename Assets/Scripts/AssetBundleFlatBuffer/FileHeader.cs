// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FLATBUFFER

namespace AssetBundleFlatBuffer
{

using global::System;
using global::FlatBuffers;

public struct FileHeader : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FileHeader GetRootAsFileHeader(ByteBuffer _bb) { return GetRootAsFileHeader(_bb, new FileHeader()); }
  public static FileHeader GetRootAsFileHeader(ByteBuffer _bb, FileHeader obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FileHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Version { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetVersionBytes() { return __p.__vector_as_arraysegment(4); }
  public int AbFileCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Flag { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FileHeader> CreateFileHeader(FlatBufferBuilder builder,
      StringOffset versionOffset = default(StringOffset),
      int abFileCount = 0,
      int Flag = 0) {
    builder.StartObject(3);
    FileHeader.AddFlag(builder, Flag);
    FileHeader.AddAbFileCount(builder, abFileCount);
    FileHeader.AddVersion(builder, versionOffset);
    return FileHeader.EndFileHeader(builder);
  }

  public static void StartFileHeader(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddVersion(FlatBufferBuilder builder, StringOffset versionOffset) { builder.AddOffset(0, versionOffset.Value, 0); }
  public static void AddAbFileCount(FlatBufferBuilder builder, int abFileCount) { builder.AddInt(1, abFileCount, 0); }
  public static void AddFlag(FlatBufferBuilder builder, int Flag) { builder.AddInt(2, Flag, 0); }
  public static Offset<FileHeader> EndFileHeader(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FileHeader>(o);
  }
};


}

#endif